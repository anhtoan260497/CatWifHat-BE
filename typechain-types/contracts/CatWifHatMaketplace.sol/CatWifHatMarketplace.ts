/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CatWifHatMarketplace {
  export type SellItemStruct = { price: BigNumberish; seller: AddressLike };

  export type SellItemStructOutput = [price: bigint, seller: string] & {
    price: bigint;
    seller: string;
  };
}

export interface CatWifHatMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyItem"
      | "cancelItem"
      | "getListing"
      | "getProceed"
      | "listingItem"
      | "onERC721Received"
      | "s_listing"
      | "updateItem"
      | "widthdrawProceeds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ItemBought"
      | "ItemCancelled"
      | "ItemListed"
      | "ItemUpdated"
      | "ProceedsWithdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingItem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_listing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdrawProceeds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProceed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_listing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawProceeds",
    data: BytesLike
  ): Result;
}

export namespace ItemBoughtEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemCancelledEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    seller: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemListedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemUpdatedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProceedsWithdrawEvent {
  export type InputTuple = [seller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [seller: string, amount: bigint];
  export interface OutputObject {
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CatWifHatMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): CatWifHatMarketplace;
  waitForDeployment(): Promise<this>;

  interface: CatWifHatMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyItem: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  cancelItem: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getListing: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [CatWifHatMarketplace.SellItemStructOutput],
    "view"
  >;

  getProceed: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  listingItem: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  s_listing: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, string] & { price: bigint; seller: string }],
    "view"
  >;

  updateItem: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  widthdrawProceeds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyItem"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelItem"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [CatWifHatMarketplace.SellItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProceed"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "listingItem"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "s_listing"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, string] & { price: bigint; seller: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateItem"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "widthdrawProceeds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ItemBought"
  ): TypedContractEvent<
    ItemBoughtEvent.InputTuple,
    ItemBoughtEvent.OutputTuple,
    ItemBoughtEvent.OutputObject
  >;
  getEvent(
    key: "ItemCancelled"
  ): TypedContractEvent<
    ItemCancelledEvent.InputTuple,
    ItemCancelledEvent.OutputTuple,
    ItemCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ItemListed"
  ): TypedContractEvent<
    ItemListedEvent.InputTuple,
    ItemListedEvent.OutputTuple,
    ItemListedEvent.OutputObject
  >;
  getEvent(
    key: "ItemUpdated"
  ): TypedContractEvent<
    ItemUpdatedEvent.InputTuple,
    ItemUpdatedEvent.OutputTuple,
    ItemUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProceedsWithdraw"
  ): TypedContractEvent<
    ProceedsWithdrawEvent.InputTuple,
    ProceedsWithdrawEvent.OutputTuple,
    ProceedsWithdrawEvent.OutputObject
  >;

  filters: {
    "ItemBought(address,uint256,address,uint256)": TypedContractEvent<
      ItemBoughtEvent.InputTuple,
      ItemBoughtEvent.OutputTuple,
      ItemBoughtEvent.OutputObject
    >;
    ItemBought: TypedContractEvent<
      ItemBoughtEvent.InputTuple,
      ItemBoughtEvent.OutputTuple,
      ItemBoughtEvent.OutputObject
    >;

    "ItemCancelled(address,uint256,address)": TypedContractEvent<
      ItemCancelledEvent.InputTuple,
      ItemCancelledEvent.OutputTuple,
      ItemCancelledEvent.OutputObject
    >;
    ItemCancelled: TypedContractEvent<
      ItemCancelledEvent.InputTuple,
      ItemCancelledEvent.OutputTuple,
      ItemCancelledEvent.OutputObject
    >;

    "ItemListed(address,uint256,uint256)": TypedContractEvent<
      ItemListedEvent.InputTuple,
      ItemListedEvent.OutputTuple,
      ItemListedEvent.OutputObject
    >;
    ItemListed: TypedContractEvent<
      ItemListedEvent.InputTuple,
      ItemListedEvent.OutputTuple,
      ItemListedEvent.OutputObject
    >;

    "ItemUpdated(address,uint256,uint256)": TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;
    ItemUpdated: TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;

    "ProceedsWithdraw(address,uint256)": TypedContractEvent<
      ProceedsWithdrawEvent.InputTuple,
      ProceedsWithdrawEvent.OutputTuple,
      ProceedsWithdrawEvent.OutputObject
    >;
    ProceedsWithdraw: TypedContractEvent<
      ProceedsWithdrawEvent.InputTuple,
      ProceedsWithdrawEvent.OutputTuple,
      ProceedsWithdrawEvent.OutputObject
    >;
  };
}
