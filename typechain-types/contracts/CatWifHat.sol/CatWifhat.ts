/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CatWifhatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimStuckTokens"
      | "decimals"
      | "denominator"
      | "getRouterAddress"
      | "isAutomatedMarketMakerPair"
      | "isExcludedFromFees"
      | "isSwapBackEnabled"
      | "manualSwapBack"
      | "marketingTaxBuy"
      | "marketingTaxSell"
      | "marketingTaxTransfer"
      | "marketingWallet"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "setAutomatedMarketMakerPair"
      | "setBuyTax"
      | "setExcludeFromFees"
      | "setMarketingWallet"
      | "setSellTax"
      | "setSwapTokensAtAmount"
      | "setTransferTax"
      | "swapTokensAtAmount"
      | "symbol"
      | "toggleSwapBack"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "OwnershipTransferred"
      | "Transfer"
      | "UpdateAutomatedMarketMakerPair"
      | "UpdateBuyTax"
      | "UpdateExcludeFromFees"
      | "UpdateMarketingWallet"
      | "UpdateSellTax"
      | "UpdateSwapBackStatus"
      | "UpdateSwapTokensAtAmount"
      | "UpdateTransferTax"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStuckTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAutomatedMarketMakerPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapBackEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualSwapBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingTaxBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingTaxSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingTaxTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludeFromFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapTokensAtAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleSwapBack",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStuckTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwapBackEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualSwapBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingTaxBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingTaxSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingTaxTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExcludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSwapBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAutomatedMarketMakerPairEvent {
  export type InputTuple = [pair: AddressLike, status: boolean];
  export type OutputTuple = [pair: string, status: boolean];
  export interface OutputObject {
    pair: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateBuyTaxEvent {
  export type InputTuple = [marketingTaxBuy: BigNumberish];
  export type OutputTuple = [marketingTaxBuy: bigint];
  export interface OutputObject {
    marketingTaxBuy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateExcludeFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMarketingWalletEvent {
  export type InputTuple = [marketingWallet: AddressLike];
  export type OutputTuple = [marketingWallet: string];
  export interface OutputObject {
    marketingWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSellTaxEvent {
  export type InputTuple = [marketingTaxSell: BigNumberish];
  export type OutputTuple = [marketingTaxSell: bigint];
  export interface OutputObject {
    marketingTaxSell: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSwapBackStatusEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSwapTokensAtAmountEvent {
  export type InputTuple = [swapTokensAtAmount: BigNumberish];
  export type OutputTuple = [swapTokensAtAmount: bigint];
  export interface OutputObject {
    swapTokensAtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTransferTaxEvent {
  export type InputTuple = [marketingTaxTransfer: BigNumberish];
  export type OutputTuple = [marketingTaxTransfer: bigint];
  export interface OutputObject {
    marketingTaxTransfer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CatWifhat extends BaseContract {
  connect(runner?: ContractRunner | null): CatWifhat;
  waitForDeployment(): Promise<this>;

  interface: CatWifhatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimStuckTokens: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  denominator: TypedContractMethod<[], [bigint], "view">;

  getRouterAddress: TypedContractMethod<[], [string], "view">;

  isAutomatedMarketMakerPair: TypedContractMethod<
    [pair: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromFees: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isSwapBackEnabled: TypedContractMethod<[], [boolean], "view">;

  manualSwapBack: TypedContractMethod<[], [void], "nonpayable">;

  marketingTaxBuy: TypedContractMethod<[], [bigint], "view">;

  marketingTaxSell: TypedContractMethod<[], [bigint], "view">;

  marketingTaxTransfer: TypedContractMethod<[], [bigint], "view">;

  marketingWallet: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAutomatedMarketMakerPair: TypedContractMethod<
    [pair: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setBuyTax: TypedContractMethod<
    [_marketingTaxBuy: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExcludeFromFees: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  setMarketingWallet: TypedContractMethod<
    [_marketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setSellTax: TypedContractMethod<
    [_marketingTaxSell: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapTokensAtAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTransferTax: TypedContractMethod<
    [_marketingTaxTransfer: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapTokensAtAmount: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleSwapBack: TypedContractMethod<[status: boolean], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimStuckTokens"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "denominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAutomatedMarketMakerPair"
  ): TypedContractMethod<[pair: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromFees"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSwapBackEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "manualSwapBack"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "marketingTaxBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingTaxSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingTaxTransfer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAutomatedMarketMakerPair"
  ): TypedContractMethod<
    [pair: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBuyTax"
  ): TypedContractMethod<
    [_marketingTaxBuy: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExcludeFromFees"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketingWallet"
  ): TypedContractMethod<[_marketingWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSellTax"
  ): TypedContractMethod<
    [_marketingTaxSell: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapTokensAtAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferTax"
  ): TypedContractMethod<
    [_marketingTaxTransfer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensAtAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleSwapBack"
  ): TypedContractMethod<[status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAutomatedMarketMakerPair"
  ): TypedContractEvent<
    UpdateAutomatedMarketMakerPairEvent.InputTuple,
    UpdateAutomatedMarketMakerPairEvent.OutputTuple,
    UpdateAutomatedMarketMakerPairEvent.OutputObject
  >;
  getEvent(
    key: "UpdateBuyTax"
  ): TypedContractEvent<
    UpdateBuyTaxEvent.InputTuple,
    UpdateBuyTaxEvent.OutputTuple,
    UpdateBuyTaxEvent.OutputObject
  >;
  getEvent(
    key: "UpdateExcludeFromFees"
  ): TypedContractEvent<
    UpdateExcludeFromFeesEvent.InputTuple,
    UpdateExcludeFromFeesEvent.OutputTuple,
    UpdateExcludeFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMarketingWallet"
  ): TypedContractEvent<
    UpdateMarketingWalletEvent.InputTuple,
    UpdateMarketingWalletEvent.OutputTuple,
    UpdateMarketingWalletEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSellTax"
  ): TypedContractEvent<
    UpdateSellTaxEvent.InputTuple,
    UpdateSellTaxEvent.OutputTuple,
    UpdateSellTaxEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSwapBackStatus"
  ): TypedContractEvent<
    UpdateSwapBackStatusEvent.InputTuple,
    UpdateSwapBackStatusEvent.OutputTuple,
    UpdateSwapBackStatusEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSwapTokensAtAmount"
  ): TypedContractEvent<
    UpdateSwapTokensAtAmountEvent.InputTuple,
    UpdateSwapTokensAtAmountEvent.OutputTuple,
    UpdateSwapTokensAtAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTransferTax"
  ): TypedContractEvent<
    UpdateTransferTaxEvent.InputTuple,
    UpdateTransferTaxEvent.OutputTuple,
    UpdateTransferTaxEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateAutomatedMarketMakerPair(address,bool)": TypedContractEvent<
      UpdateAutomatedMarketMakerPairEvent.InputTuple,
      UpdateAutomatedMarketMakerPairEvent.OutputTuple,
      UpdateAutomatedMarketMakerPairEvent.OutputObject
    >;
    UpdateAutomatedMarketMakerPair: TypedContractEvent<
      UpdateAutomatedMarketMakerPairEvent.InputTuple,
      UpdateAutomatedMarketMakerPairEvent.OutputTuple,
      UpdateAutomatedMarketMakerPairEvent.OutputObject
    >;

    "UpdateBuyTax(uint256)": TypedContractEvent<
      UpdateBuyTaxEvent.InputTuple,
      UpdateBuyTaxEvent.OutputTuple,
      UpdateBuyTaxEvent.OutputObject
    >;
    UpdateBuyTax: TypedContractEvent<
      UpdateBuyTaxEvent.InputTuple,
      UpdateBuyTaxEvent.OutputTuple,
      UpdateBuyTaxEvent.OutputObject
    >;

    "UpdateExcludeFromFees(address,bool)": TypedContractEvent<
      UpdateExcludeFromFeesEvent.InputTuple,
      UpdateExcludeFromFeesEvent.OutputTuple,
      UpdateExcludeFromFeesEvent.OutputObject
    >;
    UpdateExcludeFromFees: TypedContractEvent<
      UpdateExcludeFromFeesEvent.InputTuple,
      UpdateExcludeFromFeesEvent.OutputTuple,
      UpdateExcludeFromFeesEvent.OutputObject
    >;

    "UpdateMarketingWallet(address)": TypedContractEvent<
      UpdateMarketingWalletEvent.InputTuple,
      UpdateMarketingWalletEvent.OutputTuple,
      UpdateMarketingWalletEvent.OutputObject
    >;
    UpdateMarketingWallet: TypedContractEvent<
      UpdateMarketingWalletEvent.InputTuple,
      UpdateMarketingWalletEvent.OutputTuple,
      UpdateMarketingWalletEvent.OutputObject
    >;

    "UpdateSellTax(uint256)": TypedContractEvent<
      UpdateSellTaxEvent.InputTuple,
      UpdateSellTaxEvent.OutputTuple,
      UpdateSellTaxEvent.OutputObject
    >;
    UpdateSellTax: TypedContractEvent<
      UpdateSellTaxEvent.InputTuple,
      UpdateSellTaxEvent.OutputTuple,
      UpdateSellTaxEvent.OutputObject
    >;

    "UpdateSwapBackStatus(bool)": TypedContractEvent<
      UpdateSwapBackStatusEvent.InputTuple,
      UpdateSwapBackStatusEvent.OutputTuple,
      UpdateSwapBackStatusEvent.OutputObject
    >;
    UpdateSwapBackStatus: TypedContractEvent<
      UpdateSwapBackStatusEvent.InputTuple,
      UpdateSwapBackStatusEvent.OutputTuple,
      UpdateSwapBackStatusEvent.OutputObject
    >;

    "UpdateSwapTokensAtAmount(uint256)": TypedContractEvent<
      UpdateSwapTokensAtAmountEvent.InputTuple,
      UpdateSwapTokensAtAmountEvent.OutputTuple,
      UpdateSwapTokensAtAmountEvent.OutputObject
    >;
    UpdateSwapTokensAtAmount: TypedContractEvent<
      UpdateSwapTokensAtAmountEvent.InputTuple,
      UpdateSwapTokensAtAmountEvent.OutputTuple,
      UpdateSwapTokensAtAmountEvent.OutputObject
    >;

    "UpdateTransferTax(uint256)": TypedContractEvent<
      UpdateTransferTaxEvent.InputTuple,
      UpdateTransferTaxEvent.OutputTuple,
      UpdateTransferTaxEvent.OutputObject
    >;
    UpdateTransferTax: TypedContractEvent<
      UpdateTransferTaxEvent.InputTuple,
      UpdateTransferTaxEvent.OutputTuple,
      UpdateTransferTaxEvent.OutputObject
    >;
  };
}
